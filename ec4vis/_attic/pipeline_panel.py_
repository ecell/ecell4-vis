# coding: utf-8
"""pipeline_panel.py --- Workspace panel in visualizer application.
"""
import wx
from wx.lib.mixins import treemixin


class PipelineItem(object):
    INSTANCE_COUNTS = {}
    CLASS_NAME = None

    def __init__(self, *args, **kwargs):
        self.name = kwargs.get('name', None)
        if self.name is None:
            count = self.INSTANCE_COUNTS.setdefault(self.class_name, 0)
            self.name = self.class_name+str(count+1)
            self.INSTANCE_COUNTS[self.class_name]+=1

    @property
    def class_name(self):
        return self.CLASS_NAME or self.__class__.__name__
                                      


class Pipeline(object):

    def __init__(self, *args, **kwargs):
        self.items = kwargs.pop('items', [])
    

class PipelineListBox(wx.HtmlListBox):

    def __init__(self, *args, **kwargs):
        style = kwargs.pop('style', 0)|wx.SUNKEN_BORDER
        self.pipeline = kwargs.pop('pipeline', None)
        wx.HtmlListBox.__init__(self, *args, style=style, **kwargs)
        self.refresh()
    
    def refresh(self):
        if self.pipeline is None:
            return
        self.SetItemCount(len(self.pipeline.items))

    def OnGetItem(self, n):
        if self.pipeline is None:
            return
        item = self.pipeline.items[n]
        params = {}
        params['class_name'] = item.class_name
        params['name'] = item.name
        item_format = '''<b>%(class_name)s</b>:
        %(name)s
        '''
        return item_format % params

    def GetItemCount(self):
        return len(self.pipeline.items)


class PipelinePanel(wx.Panel):
    """Data panel for browser.
    """
    def __init__(self, *args, **kwargs):
        """Initializer.
        """
        wx.Panel.__init__(self, *args, **kwargs)
        # workspace HtmlListBox control
        list_box = PipelineListBox(self, -1)
        # buttons
        add_button = wx.Button(self, -1, u"+")
        remove_button = wx.Button(self, -1, u"-")
        
        # name bindings
        self.list_box = list_box
        # sizer
        button_sizer = wx.BoxSizer(wx.HORIZONTAL)
        button_sizer.Add(add_button, 0, wx.ALL, 0)
        button_sizer.Add(remove_button, 0, wx.ALL, 0)
        root_sizer = wx.BoxSizer(wx.VERTICAL)
        root_sizer.Add(list_box, 1, wx.ALL|wx.EXPAND, 0)
        root_sizer.Add(button_sizer, 0, wx.ALL, 5)
        root_sizer.SetMinSize((200, -1))
        self.SetSize((200, 600))
        self.SetSizer(root_sizer)
        self.Layout()


if __name__=='__main__':

    pipeline = Pipeline()
    pipeline.items.append(PipelineItem())
    pipeline.items.append(PipelineItem())
    pipeline.items.append(PipelineItem())
    pipeline.items.append(PipelineItem())
    
    class App(wx.App):
        """Demonstrative application.
        """
        def OnInit(self):
            """Initializer.
            """
            frame = wx.Frame(None, -1, u'Pipeline Panel Demo')
            pipeline_panel = PipelinePanel(frame, -1)
            pipeline_panel.list_box.pipeline=pipeline
            pipeline_panel.list_box.refresh()
            sizer = wx.BoxSizer(wx.VERTICAL)
            sizer.Add(pipeline_panel, 1, wx.ALL|wx.EXPAND, 5)
            frame.SetSizer(sizer)
            frame.Layout()
            frame.Show(True)
            self.SetTopWindow(frame)
            return True

    app = App(0)
    app.MainLoop()
