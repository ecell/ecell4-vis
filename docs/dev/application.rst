===============================
GUI アプリケーションの挙動
===============================

基本的な構成
====================

GUIアプリケーションは wxPython で書かれています。
wxPython のアプリケーションは、 wxPython の提供するクラスをサブクラス化していくことで実装します。

アプリケーションは、アプリケーション自体を表すアプリケーションクラスと、アプリケーションの GUI に使われるコンポーネントの実装からなります。

wxPython のアプリケーション実装には、いくつかの方法がありますが、 ec4vis で用いている実装は、以下のようなポリシーに基づいています。

#. アプリケーションクラスと、GUIコンポーネントクラスの実装を分ける。
#. ビジネスロジックは、可能なかぎりアプリケーションクラス側に書き、 GUI コンポーネントの実装の中に含めない。GUI コンポーネントの実装は、レイアウトの調整とユーティリティメソッドの定義に限定する。
#. GUI コンポーネントから、アプリケーションにメッセージを送りたい場合は、以下の二つの方法を取る。
  - カスタムのイベントオブジェクトを定義して、 wxGetApp() で取得したアプリケーションクラスに送信する。
  - コールバックインタフェースを用意して、アプリケーションオブジェクト中のメソッドにフックする。

アプリケーションクラス
===========================

アプリケーションクラスは ec4vis.app モジュールで定義されています。

初期化
---------------

アプリケーション起動時には、以下の順で初期化が行われます。

#. Python によってアプリケーションクラスの __init__() メソッドが呼び出されます。GUI の初期化に先立って処理を行いたい場合は、ここに処理を差し込んでください。
#. wxPython によって、アプリケーションクラスの OnInit() メソッドが呼び出されます。


__init__
~~~~~~~~~~


現在の実装では、OnInit() が呼び出される直前の段階で、レジストリの初期化、空のデータソースインスタンスの生成、空のパイプラインインスタンスの生成が行われています。
前回の起動でレジストリがすでに存在する場合は、既存のレジストリにアクセスが可能です。なければ、新たに生成されます。
データソースとパイプラインは空で、OnInit() 以降の処理で復元される可能性があります。このとき、初期のインスタンスは使われなくなるので注意が必要です。


OnInit()
~~~~~~~~~~~~~

OnInit() では、次の3段階で初期化を行います。

#. init_ui() で、GUI の構築とバインディングを行います。
#. init_plugins() で、プラグインの読み込みを行います。
#. post_init_setup() で、ユーザセッション開始直前の初期化処理を行います。

init_ui では、メインウィンドウやメニューなど、初期状態で表示される GUI コンポーネントの構築を行います。
init_ui は、その中でさらに init_browser や init_pipeline_panel などを呼び出して、GUI 上のコンポーネントを設定してゆきます。
さらに、アプリケーションインスタンスへのバインディングを行い、アトリビュートとして参照できるようにします。
前後して、イベントハンドラのバインディングを行い、GUIコンポーネント上で発生したイベントが、アプリケーション内のイベントハンドラで処理されるように設定します。
バインディングに使うアトリビュートは、メソッド中で用意されることに注意してください（__init__ メソッドなどで、予め空の値を用意したりしていないため、バインディングする前にアトリビュート参照するようなコードを書くと、AttributeError を引き起こします）。
init_ui がリターンする直前に、メインウィンドウがスクリーンに表示されます。

init_plugins は、プラグインディレクトリ下のモジュールを探索して、順にロードしてゆきます。

post_init_setup では、GUI やプラグインがロードされた後の初期化処理を実行します。データソースやパイプラインをレジストリから復元する処理は、ここで行われます（データソースやパイプラインがプラグインとして定義されている場合、プラグインのロードが終わらないと、プラグイン上のクラスインスタンスを復元できないからです）。


終了時の処理
---------------

終了時には、 wxPython によってアプリケーションの OnExit メソッドが呼び出されます。
OnExit() は、アプリケーションインスタンスや、GUIコンポーネントの finalize メソッドを呼び出して、終了処理を実行します。
アプリケーションの終了時に、データの保存やクリーンアップを行いたい場合には、 finalize メソッドでの実装を検討してください。


