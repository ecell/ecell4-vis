=====================
パイプライン
=====================

パイプラインは、 ec4vis のデータ処理の中心となるデータ構造です。
パイプラインは、名前の通り、データ処理を行う要素（ノード）を連結して、中にデータを流すようになっています。
（実際には、ノード間の接続は分岐できるので、ツリー状の構造をとりえます）
パイプラインの始点（ルートノード）にはデータソースがあります。ルートノードに接続しているノードは、「上流の」ルートノードからデータソースの情報を取得して、何らかのデータ処理を行います。また、ノードの「下流」に接続している別のノード（子ノード）からの要求に応じて、ノード内部のデータを提供します。
ノードの下流から、上流に対してデータのリクエストが連鎖することで、各ノードの状態が更新され、ノード毎に処理が行われる仕組みです。

パイプラインは、GUI とは切り離して扱うことができます。すなわち、GUI や wxPython ライブラリが存在しなくても、パイプラインを組み上げて、データを流すことが可能です。
ec4vis の GUI では、パイプラインの編集と、パイプラインの状態を表示するインスペクタやビジュアライザの操作を行えます。

パイプラインの構造
=======================

パイプラインは、

* ツリー全体を保持するパイプラインツリー
* パイプラインツリーの各ノードを表すパイプラインノード
* パイプラインのノード間で、データ形式の定義に使われるデータスペック
* パイプライン中のイベントメッセージの伝播に使われるパイプラインイベント
* パイプラインの状態変化を監視するオブザーバ

によって実現されています。


パイプラインツリー
-----------------------

パイプラインツリーは、ツリーのルートノードへの参照を持つだけの単純なオブジェクトです。
パイプラインツリーには、ツリーの構造を保存・復元する機能の他、パイプラインのルートから下方向にイベントを伝播させる機能があります。


パイプラインノード
-----------------------

パイプラインノードは、パイプラインの構成要素です。
パイプラインノードは、一つの親ノードと、複数の子ノードとの間で連結できます。
パイプラインノードは、後述のパイプラインイベントを受け取ることができ、その際の処理を定義できます。
パイプラインノードには入力スペック・出力スペックという概念があり、接続できる親ノードや、接続を受け入れる子ノードを制限しています。
パイプラインノードには、オブザーバと呼ばれるオブジェクトを登録でき、パイプラインノードの状態が変化したときに、オブザーバに更新を伝えるためのフック機構を備えています。


データスペック
----------------

データスペックは、パイプラインノード間で交換できるデータの形式を表すオブジェクトです。現在の実装では、データスペックは常にクラスオブジェクトの形で扱われます。


パイプラインイベント
-----------------------

パイプラインイベントは、パイプラインノード間でイベントメッセージを交換するために使われるオブジェクトです。パイプラインイベントにはイベントの型とデータがあり、イベントオブジェクトを使って任意のデータを伝播させられます。


オブザーバ
------------------

オブザーバは、オブザーバ用のインタフェースを備えたオブジェクトです。オブザーバをパイプラインノードのオブザーバリストに登録すると、パイプラインノード中で状態の更新がおきたときなどに、オブザーバに更新を通知できます。インスペクタやビジュアライザは、オブザーバインタフェースを備えていて、ノードの更新をオブザーバインタフェースを経由して受け取るようになっています。


パイプラインノードとインスペクタ・ビジュアライザ
======================================================

パイプラインノードとインスペクタやビジュラアイザの間には、相互の参照関係が成立しています。
ec4vis アプリケーションは、インスペクタやビジュアライザインスタンスの生成時に、パイプラインノードへの参照を渡します。
この値はインスペクタやビジュアライザの target というアトリビュートに保存されます。
また、アプリケーションは、インスペクタやビジュアライザインスタンスを、パイプラインノードのオブザーバリストに登録します。
そのため、ノードの内部状態が更新されると、自動的にインスペクタやビジュアライザにデータが伝播します。


パイプラインノードの定義
============================

パイプラインノードを新たに定義するときには、以下の作業を行います。

#. （必要なら）データスペックを定義する。
#. パイプラインノードクラスを定義する。
#. （GUIで使う場合）パイプラインノードクラスを登録する。
#. （GUIで使う場合で、必要なら）パイプラインノードクラスに対応するインスペクタページを定義して、登録する。
#. （GUIで使う場合で、必要なら）パイプラインノードクラスに対応するビジュアライザページを定義して、登録する。



データスペックの定義
-----------------------------

データスペックは、 ec4vis.pipeline.DataSpec クラスのサブクラス化によって行います。
データスペッククラスは空の実装でかまいません。


パイプラインノードクラスの定義
-----------------------------------

パイプラインノードクラスの定義には、以下の作業が必要です:

#. ec4vis.pipeline.PipelineNode をサブクラス化する。
#. 入力スペック・出力スペックを定義する
#. （子ノードにデータを提供する場合） request_data() メソッドを定義する


PipelineNode のサブクラス化
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PipelineNode クラスをサブクラス化するときには、 __init__ の定義に注意してください。
インスタンス内外で参照される可能性のあるアトリビュートは、 __init__ で初期化した上で、親クラスの __init__ を呼び出すようにしてください。


入力スペック・出力スペックの定義
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

入力スペック・出力スペックは、ノードクラスのクラスアトリビュート、それぞれ INPUT_SPEC, OUTPUT_SPEC に定義します。
これらのクラスアトリビュートは、いずれもリストで定義します。
INPUT_SPEC を空にすると、どのノードの下にでも接続できます。この仕様や、データソースに依存しない機能を実装するときに使います。
OUTPUT_SPEC を空にすると、 INPUT_SPEC が空のノードしか、このノードに接続できなくなります。

request_data の定義
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

request_data は、引数 spec と、任意のキーワード引数を取ります。
request_data は、子ノードがこのノードにデータを要求する時に呼び出されます。
引数 spec にはデータスペック（クラス）オブジェクトが入ります。
request_data の処理では、どのデータスペックが要求されたかに応じて、返すデータを変更します
（実際には、どのようなデータを返してもかまいませんが、子ノードは要求したスペックのデータが返ることを期待しています）。
子ノードがキーワード引数に何らかの値を指定する可能性がある場合には、キーワード引数辞書を解析して、その内容に応じた処理を行います。
例えば、親ノードが frame_id というキーワード引数をサポートして、子ノードに指定されたフレーム番号のデータを提供する場合などに使います。
request_data は、提供すべきデータを正しく生成できなかったときや要求されたデータを提供できないときなど、子ノードに想定通りのデータを提供できない場合には、None を返してください。
このことは request_data を呼び出す側でも注意が必要です。


パイプラインノードクラスの登録
==================================

定義したパイプラインノードを、GUI 上でツリーに追加するには、 ec4vis.pipeline.register_pipeline_node でノードクラスを登録する必要があります。
ec4vis.pipeline.register_pipeline_node は、ノードクラスを引数に渡して呼び出します。


インスペクタページ・ビジュアライザページの登録
===================================================

あるパイプラインノードクラスに対して、GUI上でインスペクタページやビジュアライザページを使えるようにするには、ノードクラスにページクラスを対応づけて登録する必要があります。
この操作は、それぞれ ec4vis.inspector.page.register_inspector_page, ec4vis.inspector.page.register_visualizer_page で行います。


