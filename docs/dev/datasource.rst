=======================
データソース
=======================

データソースは、 ec4vis.datasource.Datasource クラスで定義されている、URIを保存するだけの単純なオブジェクトです。
ec4vis のブラウザ上では、データソースを選択するためのデータソースページを複数作成できますが、これらのページは全て、アプリケーションが管理する一つの Datasouce インスタンスを参照しています。
また、パイプラインのルートオブジェクトも、この Datasouce インスタンスを共有しています。
データソースページ上で現在 URI の値を変更すると、その変更は共有している Datasource インスタンスを通じて、パイプラインオブジェクトに伝わる仕掛けになっています。

データソースパネルとデータソースページ
==========================================

データソースページは、データソースパネル上のタブページとして存在します。タブページは、wxPython の wxNotebook で実現されています。
データソースパネルはフォルダのようなもので、そこにデータソースページを挿入していくような仕組みです。

データソースページは、アプリケーションの実行中に動的に生成・削除されます。
そのため、データソースページを新たに実装するときには、データソースページの削除が、アプリケーションの実行に影響を及ぼさないように注意してください（削除処理中に正しくリソースが開放されるよう注意したり、削除処理中に起きる例外がアプリケーションを停止させないよう注意してください）。


データソースページの実装
================================

データソースページを新たに実装するときには、二つのステップを経ます:

#. ec4vis.datasource.page.DatasourcePage クラスのサブクラスを定義する。
#. ec4vis.datasource.page.register_datasource_page で、データソースページクラスを登録する。


DatasourcePage クラスの拡張
===============================

DatasourcePage は、空のパネルとして定義されています。DatasourcePage を拡張するときには、以下のような作業を行う必要があるでしょう:

#. __init__ を拡張して（オーバライドせず、拡張してください）の中で、必要な UI を構築する。
#. UIにイベントハンドラを定義して、UI 上でデータソースの選択が変更されたときに、update_datasource メソッドを呼び出す。
#. update_datasource メソッドを定義して、現在の URI を構築します。
#. update_datasource の中などで datasource_changed を呼び出し、Datasource オブジェクトの URI を更新します。


データソースページクラスの登録
================================

DatasourcePage のサブクラスを定義したら、 register_datasource_page() にクラスを渡して登録します。

.. note:: 登録を行わないと、アプリケーションのデータソースの追加メニューに表示されません。


FilesystemDatasourcePage
==============================

FilesystemDatasourcePage は、ファイルシステムからデータソースを選択するためのUIを備えたデータソースページです。
ファイルシステムデータソースは、ディレクトリブラウザボタン（テキストエリアとボタンの組み合わせ）と、ディレクトリツリーを表示するツリービューからなります。
ディレクトリブラウザボタンで、ディレクトリツリーのルートパスを指定し、ディレクトリツリー中のノードを選択することで、選択されたパスを URI としてデータソースにセットします。
FilesystemDatasourcePage は、データソースをプラグインで実装するときのサンプルとして、プラグインモジュールの形で組み込まれています。 ec4vis.plugins.filesystem_datasource_page モジュールを参照してください。
