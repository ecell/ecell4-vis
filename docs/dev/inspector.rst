======================
インスペクタ
======================

インスペクタは、パイプラインノードの状態を表示したり、ノードの状態を更新するための GUI コンポーネントです。
インスペクタはビジュアライザと同じ、ノードのオブザーバとして実現されていて、 target アトリビュートでノードを参照し、ノードの更新時には update() メソッドが呼び出されます。

インスペクタを定義するには、以下のステップが必要です。

#. （まだなければ）インスペクタが参照するノードクラスを定義する。
#. インスペクタページクラスを定義する。
#. ノードクラスとインスペクタページクラスを結びつけて登録する。


インスペクタページクラスの定義
===================================

インスペクタページクラスを定義する手順は、以下の通りです。

#. ec4vis.inspector.page.InspectorPage をサブクラス化する。
#. 必要なUIやイベントを実装する。
#. update メソッドを定義する。

InspectorPage のサブクラス化
-----------------------------------

InspectorPage をサブクラス化するときには __init__ で InspectorPage.__init__ を忘れずに呼び出してください。
InspectorPage.__init__ の呼び出しは、レイアウトのために self.sizer を参照するよりも *前に* 行う必要があります。
self.sizer は InspectorPage.__init__ の内部で初期化されているからです。


UIやイベントの実装
-----------------------

UI やイベントを実装するときには、以下の点に注意してください。

* インスペクタに結び付けられたノードは、 self.target で参照できます。ただし、 self.target の値が常に有意なパイプラインノードオブジェクトであることを期待してはなりません。
  とりわけ終了処理やオブジェクトの finalize に近いフェーズの実装では、self.target のアトリビュートを操作する前にチェックしてください。
* インスペクタパネルからは、アプリケーションオブジェクトやメインウィンドウ上のコンポーネントを直接を参照できません。そのような必要が生じたら、wx.GetApp() でアプリケーションオブジェクトを取得してから、アプリケーションオブジェクトのアトリビュートを辿って、目的のコンポーネントに到達してください。


update メソッドの定義
---------------------------

update メソッドは、ノードの状態が更新されたときに、ノードの各オブザーバに対して呼び出されます。 update を受け取ったときは、インスペクタが監視しているノードの内部状態が変わった時なので、 self.target を介してノードの状態を調べて、インスペクタのUIに反映する必要が生じるでしょう。 

.. note::

   update メソッドから始まった処理の中で、self.target のメソッドを呼び出すときや、プロパティにアクセスするときは、その処理がノードの内部状態変化を引き起こして、結果的に新たな update が呼び出されることのないようにしてください（さもないと、update が再帰的に呼び出されてしまいます！）。


ノードクラスとインスペクタページクラスを結びつける
=========================================================


インスペクタページクラスを定義したら、 ec4vis.inspector.page.register_inspector_page で登録します。
ec4vis.inspector.page.register_inspector_page には、ノードクラスの **名前の文字列** と、インスペクタページクラスを指定します。



