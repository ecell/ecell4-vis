======================
ビジュアライザ
======================

ビジュアライザは、パイプラインノードの保持するデータを可視化するための GUI コンポーネントです。
ビジュアライザはインスペクタと同様ノードのオブザーバとして実現されていて、 target アトリビュートでノードを参照し、ノードの更新時には update() メソッドが呼び出されます。

ビジュアライザを定義するには、以下のステップが必要です。

#. （まだなければ）ビジュアライザが参照するノードクラスを定義する。
#. ビジュアライザページクラスを定義する。
#. ノードクラスとビジュアライザページクラスを結びつけて登録する。


ビジュアライザページクラスの定義
===================================

ビジュアライザページクラスを定義する手順は、以下の通りです。

#. ec4vis.inspector.page.VisualizerPage をサブクラス化する。
#. 必要なUIやイベントを実装する。
#. update メソッドを定義する。

VisualizerPage のサブクラス化
-----------------------------------

VisualizerPage をサブクラス化するときには __init__ で VisualizerPage.__init__ を忘れずに呼び出してください。
VisualizerPage.__init__ の呼び出しは、レイアウトのために self.sizer を参照するよりも *前に* 行う必要があります。
self.sizer は VisualizerPage.__init__ の内部で初期化されているからです。


UIやイベントの実装
-----------------------

UI やイベントを実装するときには、以下の点に注意してください。

* ビジュアライザに結び付けられたノードは、 self.target で参照できます。ただし、 self.target の値が常に有意なパイプラインノードオブジェクトであることを期待してはなりません。
  とりわけ終了処理やオブジェクトの finalize に近いフェーズの実装では、self.target のアトリビュートを操作する前にチェックしてください。
* ビジュアライザパネルからは、アプリケーションオブジェクトやメインウィンドウ上のコンポーネントを直接を参照できません。そのような必要が生じたら、wx.GetApp() でアプリケーションオブジェクトを取得してから、アプリケーションオブジェクトのアトリビュートを辿って、目的のコンポーネントに到達してください。


update メソッドの定義
---------------------------

update メソッドは、ノードの状態が更新されたときに、ノードの各オブザーバに対して呼び出されます。 update を受け取ったときは、ビジュアライザが監視しているノードの内部状態が変わった時なので、 self.target を介してノードの状態を調べて、ビジュアライザのUIに反映する必要が生じるでしょう。 

.. note::

   update メソッドから始まった処理の中で、self.target のメソッドを呼び出すときや、プロパティにアクセスするときは、その処理がノードの内部状態変化を引き起こして、結果的に新たな update が呼び出されることのないようにしてください（さもないと、update が再帰的に呼び出されてしまいます！）。


ノードクラスとビジュアライザページクラスを結びつける
=========================================================


ビジュアライザページクラスを定義したら、 ec4vis.inspector.page.register_visualizer_page で登録します。
ec4vis.inspector.page.register_visualizer_page には、ノードクラスの **名前の文字列** と、ビジュアライザページクラスを指定します。



VTK を使ったビジュアライザを実装する
===========================================

ec4vis.visualizer.vtk3d.page.Vtk3dVisualizerPage は、 VTK を使ったレンダリングウィンドウを備えたビジュアライザページです。
このクラスをサブクラス化すると、VTK のビューと、標準的なインタラクタ（マウス操作）に対応したビジュアライザを実装できます。

Vtk3dVisualizerPage を使うときに、以下の点に注意してください。

* Vtk3dVisualizerPage の update メソッドは、 self.render() を呼び出しています。サブクラスの実装方針としては、 update をオーバライドする方法、 render をオーバライドする方法、もしくは両者の組み合わせが考えられますが、 update によってレンダリングが必要な場合には、 self.render() を必ず忘れずに呼び出して下さい。
* Vtk3dVisualizerPage には、ウィンドウのリサイズ時に、一定のアスペクト比でパネルにフィットするようなリサイズを行う仕組みがあります。アスペクト比の制御をやめさせたければ、 OnSize をオーバライドして、別のリサイズアルゴリズムを実装してください。
* Vtk3dVisualizerPage は、内部に wxVTKRenderWindowInteractor インスタンスを保持しており、実際の描画はこのオブジェクトが行います。 wxVTKRenderWindowInteractor インスタンスは self.render_window で参照できると同時に、インスタンスの初期化時に、ノードの render_window アトリビュートに代入されます。そのためノードは、 update を呼び出さず、直接 render_window を操作することもできます。（とはいえ、 update を経由した描画を推奨します）。
* VTK のレンダラオブジェクトは self.renderer でアクセスできます。 ec4vis.visualizer.vtk3d.visual を使って可視化を行う場合には、 self.renderer を使って Visual オブジェクトを生成できます。







